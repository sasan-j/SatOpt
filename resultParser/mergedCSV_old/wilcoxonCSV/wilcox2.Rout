
R version 2.15.1 (2012-06-22) -- "Roasted Marshmallows"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> loadCsvFile <- function(fileName)
+ {
+ 	csv_file<-read.csv(fileName)
+ 	return (as.matrix(csv_file))
+ }
> 
> makeRow <- function(rowElements)
+ {
+ 	rowString = ""
+ 	
+ 	for (i in 1:length(rowElements))
+ 	{
+ 		element = removeChars(rowElements[i])
+ 		
+ 		if(i == length(rowElements))
+ 		{
+ 			rowString = paste(rowString, element )
+ 		}
+ 		else
+ 		{
+ 			rowString = paste(rowString, element, cellSeparator )
+ 		}
+ 	}
+ 	
+ 	rowString = paste(rowString, rowSeparator )
+ 	
+ 	return (rowString)
+ }
> 
> makeTableHeader <- function(variableCols)
+ {
+ 	headerString = "\\begin{table}\n"
+ 	headerString = paste(headerString, "\\centering")
+ 	headerString = paste(headerString, "\\begin{tabular}{l")
+ 	
+ 	for(i in 1:variableCols)
+ 	{
+ 		headerString = paste(headerString, "c")
+ 	}
+ 	
+ 	headerString = paste(headerString,"}\n")
+ 	return (headerString)
+ }
> 
> makeDocHeader <- function()
+ {
+ 	headerString = "\\documentclass{article}\n"
+ 	headerString = paste(headerString, "\\title{Wilcox}\n")
+ 	headerString = paste(headerString, "\\usepackage{amssymb}\n")
+ 	headerString = paste(headerString, "\\author{Apostolos Stathakis}\n")
+ 	headerString = paste(headerString, "\\begin{document}\n")
+ 	headerString = paste(headerString, "\\maketitle\n")
+ 	headerString = paste(headerString, "\\section{Tables}\n")
+ 
+ 	return (headerString)
+ }
> 
> makeTableTail <- function()
+ {
+ 	tailString = "\\hline\n"
+ 	tailString = paste(tailString, "\\end{tabular}\n")
+ 	tailString = paste(tailString, "\\end{table}\n")
+ 	
+ 	return (tailString)
+ }
> 
> makeDocTail <- function()
+ { 
+ 	tailString = "\\end{document}\n"
+ 	return (tailString)
+ }
> 
> removeChars <-function(element)
+ {
+ 	result = gsub("_100_", "", element)
+ 	result = gsub("noncoev", "", result)
+ 	result = gsub("_async_seq", "", result)
+ 
+ 	return (result)
+ }
> 
> 
> cellSeparator = "&"
> rowSeparator = "\\\\\n"
> 
> outFile = "./sensitivity_out.tex"
> 
> csvData = loadCsvFile("./ch13_wilcoson_unaryHyperVol.csv")
> 
> dataSets =  csvData[,1]
> 
> minCol = 99999
> 
> ##writeLines(makeTableHeader(), outFile, append=TRUE)
> 
> 
> tableString = makeDocHeader()
> tableString = paste(tableString, makeTableHeader(length(dataSets)))
> 
> 
> 
> for(dataSet in dataSets)
+ {
+ 	##csvData[which(csvData == "cGA_100_coev_async_seq"),]
+ 	
+ 	colCount = 0
+ 	for(cell in csvData[which(csvData == dataSet),2:dim(csvData)[2]])
+ 	{
+ 		if (!is.na(cell))
+ 		{
+ 			colCount = colCount + 1
+ 			##print(cell)
+ 		}
+ 	}
+ 
+ 	if (colCount < minCol)
+ 	{
+ 		minCol = colCount
+ 	}
+ 	print(paste("> ", dataSet, " has ", colCount, " cols"))	
+ }
[1] ">  NSGA2  has  27000  cols"
[1] ">  SPEA2  has  27000  cols"
[1] ">  IBEA  has  26940  cols"
[1] ">  MOGA  has  26970  cols"
> 
> print(paste("> Analysing first", minCol, " cols"))	
[1] "> Analysing first 26940  cols"
> 
> 
> ## the header row
> tableString = paste(tableString, makeRow(c("\\hline",dataSets)))
> tableString = paste(tableString, "\\hline")
> 
> print(tableString)
[1] "\\documentclass{article}\n \\title{Wilcox}\n \\usepackage{amssymb}\n \\author{Apostolos Stathakis}\n \\begin{document}\n \\maketitle\n \\section{Tables}\n \\begin{table}\n \\centering \\begin{tabular}{l c c c c }\n  \\hline & NSGA2 & SPEA2 & IBEA & MOGA \\\\\n \\hline"
> 
> #for(dataSet1 in dataSets)
> for (i in 1:length(dataSets))
+ {
+ 	dataSet1 = dataSets[i]
+ 	values1 = as.numeric(csvData[which(csvData == dataSet1),2:(minCol+1)])
+ 	average1 = mean(values1)
+ 	
+ 	rowElements = dataSet1
+ 	
+ 	#for(dataSet2 in dataSets)
+ 	for (j in 1:length(dataSets))
+ 	{
+ 		dataSet2 = dataSets[j]
+ 		values2 = as.numeric(csvData[which(csvData == dataSet2),2:(minCol+1)])	
+ 		average2 = mean(values2)
+ 		
+ 		test = wilcox.test(values1, values2)$p.value
+ 		print(test)
+ 		
+ 		if(i <= j)
+ 		{
+ 			if ((test > 0.05) || test == "NaN")
+ 			{
+ 				symbol = " -- "
+ 			}
+ 			else 
+ 			{
+ 				if (average1 < average2)
+ 				{
+ 					symbol = "$\\blacktriangle$"
+ 				}
+ 				else
+ 				{
+ 					symbol = "$\\triangledown$"
+ 				}
+ 			}
+ 		}
+ 		else
+ 		{
+ 			symbol = " "
+ 		}
+ 		
+ 		rowElements = c(rowElements, symbol)
+ 		
+ 		#print(paste("> ", dataSet1, " has average ", average1))
+ 	}
+ 	
+ 	tableString = paste(tableString, makeRow(rowElements))
+ }
[1] 1
[1] 0
[1] 2.124008e-199
[1] 0
[1] 0
[1] 1
[1] 0
[1] 0
[1] 2.124008e-199
[1] 0
[1] 1
[1] 0
[1] 0
[1] 0
[1] 0
[1] 1
> 
> tableString = paste(tableString, makeTableTail())
> tableString = paste(tableString, makeDocTail())
> 
> writeLines(tableString)
\documentclass{article}
 \title{Wilcox}
 \usepackage{amssymb}
 \author{Apostolos Stathakis}
 \begin{document}
 \maketitle
 \section{Tables}
 \begin{table}
 \centering \begin{tabular}{l c c c c }
  \hline & NSGA2 & SPEA2 & IBEA & MOGA \\
 \hline  NSGA2 &  --  & $\blacktriangle$ & $\blacktriangle$ & $\blacktriangle$ \\
  SPEA2 &   &  --  & $\triangledown$ & $\blacktriangle$ \\
  IBEA &   &   &  --  & $\blacktriangle$ \\
  MOGA &   &   &   &  --  \\
 \hline
 \end{tabular}
 \end{table}
 \end{document}

> 
> writeLines(tableString, outFile)
> 
> 
> proc.time()
   user  system elapsed 
 15.672   0.088  15.818 
